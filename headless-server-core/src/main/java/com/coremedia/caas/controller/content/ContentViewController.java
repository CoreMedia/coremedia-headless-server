package com.coremedia.caas.controller.content;

import com.coremedia.caas.controller.base.GraphQLControllerBase;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/caas/v1/{tenantId}/sites/{siteId}")
@Api(value = "/caas/v1/{tenantId}/sites/{siteId}", tags = "Content", description = "Operations for content objects")
public class ContentViewController extends GraphQLControllerBase {

  public ContentViewController() {
    super("caas.content.timer");
  }


  @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Site.Query",
          notes = "Run the GraphQL query with name \"sites\" and view \"default\" on the requested site indicator.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query for the site indicator and default view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           HttpServletRequest request,
                           HttpServletResponse response) {
    return execute(tenantId, siteId, "sites", null, "default", request, response);
  }

  @RequestMapping(value = "/{viewName}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Site.QueryWithView",
          notes = "Run the GraphQL query with name \"sites\" and given view on the requested site indicator.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query for the site indicator and given view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query view", required = true) @PathVariable String viewName,
                           HttpServletRequest request,
                           HttpServletResponse response) {
    return execute(tenantId, siteId, "sites", null, viewName, request, response);
  }

  @RequestMapping(value = "/{queryName}/{targetId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Content.Query",
          notes = "Run the GraphQL query with given name and view \"default\" on the requested content object.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No query with the given name and default view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query name", required = true) @PathVariable String queryName,
                           @ApiParam(value = "The content's numeric ID or alias", required = true) @PathVariable String targetId,
                           HttpServletRequest request,
                           HttpServletResponse response) {
    return execute(tenantId, siteId, queryName, targetId, "default", request, response);
  }

  @RequestMapping(value = "/{queryName}/{targetId}/{viewName}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
  @ApiOperation(
          value = "Content.QueryWithView",
          notes = "Run the GraphQL query with given name and view on the requested content object.\n" +
                  "JSON generated by the executed GraphQL query varies, so no specific return type can be given.",
          response = Object.class
  )
  @ApiResponses(value = {
          @ApiResponse(code = 400, message = "Invalid tenant or site"),
          @ApiResponse(code = 404, message = "No content with the given name or alias or no query with the given name and view was found")
  })
  public Object getContent(@ApiParam(value = "The tenant's unique ID", required = true) @PathVariable String tenantId,
                           @ApiParam(value = "The site's unique ID", required = true) @PathVariable String siteId,
                           @ApiParam(value = "The requested query name", required = true) @PathVariable String queryName,
                           @ApiParam(value = "The content's numeric ID or alias", required = true) @PathVariable String targetId,
                           @ApiParam(value = "The requested query view", required = true) @PathVariable String viewName,
                           HttpServletRequest request,
                           HttpServletResponse response) {
    return execute(tenantId, siteId, queryName, targetId, viewName, request, response);
  }
}
