<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <parent>
    <groupId>com.coremedia.labs</groupId>
    <artifactId>headless-server</artifactId>
    <version>1-SNAPSHOT</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>

  <artifactId>headless-performance-test</artifactId>
  <packaging>war</packaging>

  <description>
    A performance test example for the Headless API.
    Invoke the test via "mvn install -Pperformance-test" and find the result files below target/ afterwards.
  </description>

  <properties>
    <gatling.version>2.2.2</gatling.version>
    <gatling-plugin.version>2.2.0</gatling-plugin.version>
    <scala.version>2.11.8</scala.version>
    <scala-maven-plugin.version>3.2.2</scala-maven-plugin.version>
    <akka.actor.version>2.4.10</akka.actor.version>
    <netty.version>4.0.37.Final</netty.version>
    <scala.java8.compat.version>0.8.0-RC1</scala.java8.compat.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${scala.version}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-reflect</artifactId>
        <version>${scala.version}</version>
      </dependency>
      <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-actor_2.11</artifactId>
        <version>${akka.actor.version}</version>
      </dependency>
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-handler</artifactId>
        <version>${netty.version}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang.modules</groupId>
        <artifactId>scala-java8-compat_2.11</artifactId>
        <version>${scala.java8.compat.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>headless-server-webapp</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling.highcharts</groupId>
      <artifactId>gatling-charts-highcharts</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling</groupId>
      <artifactId>gatling-core</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling</groupId>
      <artifactId>gatling-http</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling</groupId>
      <artifactId>gatling-commons</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling</groupId>
      <artifactId>gatling-app</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.gatling</groupId>
      <artifactId>gatling-recorder</artifactId>
      <version>${gatling.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- use separate profile so that a simple "mvn package / install" does not execute a performance test -->
      <id>performance-test</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>1.7</version>
            <executions>
              <execution>
                <id>reserve-ports</id>
                <phase>test</phase>
                <goals>
                  <goal>reserve-network-port</goal>
                </goals>
                <configuration>
                  <portNames>
                    <portName>tomcatHTTPPort</portName>
                    <portName>tomcatAJPPort</portName>
                    <portName>tomcatRMIPort</portName>
                  </portNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <configuration>
              <container>
                <containerId>${tomcat.id}</containerId>
                <zipUrlInstaller>
                  <url>http://repo1.maven.org/maven2/org/apache/tomcat/tomcat/${tomcat.version}/tomcat-${tomcat.version}.zip</url>
                </zipUrlInstaller>
                <systemProperties>
                  <content-server.host>${installation.server.host}</content-server.host>
                  <content-server.port>${installation.server.port}</content-server.port>
                  <log.dir>${project.build.directory}/logs</log.dir>
                </systemProperties>
              </container>
              <configuration>
                <home>${project.build.directory}/catalina-base</home>
                <properties>
                  <cargo.servlet.port>${tomcatHTTPPort}</cargo.servlet.port>
                  <cargo.rmi.port>${tomcatRMIPort}</cargo.rmi.port>
                  <cargo.tomcat.ajp.port>${tomcatAJPPort}</cargo.tomcat.ajp.port>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>headless-server-webapp</artifactId>
                  <type>war</type>
                  <properties>
                    <context>/</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
            <executions>
              <execution>
                <id>start-tomcat</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-tomcat</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <version>${scala-maven-plugin.version}</version>
          </plugin>
          <plugin>
            <groupId>io.gatling</groupId>
            <artifactId>gatling-maven-plugin</artifactId>
            <version>${gatling-plugin.version}</version>
            <executions>
              <execution>
                <id>loadtest</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <runDescription>warmup</runDescription>
                  <simulationsFolder>${project.basedir}/src/test/scala</simulationsFolder>
                  <simulationClass>Loadtest</simulationClass>
                  <jvmArgs>
                    <jvmArg>-Dloadtest.scenario=Sample Loadtest</jvmArg>
                    <jvmArg>-Dloadtest.duration=600</jvmArg>
                    <jvmArg>-Dloadtest.concurrency=50</jvmArg>
                    <jvmArg>-Dloadtest.rampup=60</jvmArg>
                    <jvmArg>-Dloadtest.baseUrl=http://localhost:${tomcatHTTPPort}</jvmArg>
                    <jvmArg>-Dloadtest.urlFile=${project.basedir}/src/test/resources/data/urls.csv</jvmArg>
                  </jvmArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
